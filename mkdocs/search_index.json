{
    "docs": [
        {
            "location": "/", 
            "text": "Homenet Core\n\n\nThe Basics\n\n\n\n\nRequirements\n\n\nRedis persistence\n\n\n\n\n\n\nStarting\n\n\nConfiguration\n\n\nCustomizing\n\n\n\n\nCore Concepts\n\n\n\n\nNode RED rule system\n\n\nCustom nodes\n\n\nGlobal context\n\n\n\n\n\n\nScenes\n\n\nZones\n\n\nEnvironment\n\n\nSunlight\n\n\n\n\n\n\nCore Components\n\n\nCommands\n\n\nEvents\n\n\nPresence\n\n\nSwitches\n\n\nTriggers\n\n\nValues\n\n\n\n\n\n\nClasses\n\n\nPeople\n\n\nLights\n\n\nLocks\n\n\nSensors\n\n\n\n\n\n\n\n\nPlugins\n\n\n\n\nNode RED plugins\n\n\nHomenet plugins\n\n\nButtons\n\n\nHVAC\n\n\nLights\n\n\nLocks\n\n\nSensors\n\n\n\n\n\n\n\n\nAPI\n\n\n\n\nAuthentication: TBD\n\n\nDocumentation: TBD", 
            "title": "Home"
        }, 
        {
            "location": "/#homenet-core", 
            "text": "", 
            "title": "Homenet Core"
        }, 
        {
            "location": "/#the-basics", 
            "text": "Requirements  Redis persistence    Starting  Configuration  Customizing", 
            "title": "The Basics"
        }, 
        {
            "location": "/#core-concepts", 
            "text": "Node RED rule system  Custom nodes  Global context    Scenes  Zones  Environment  Sunlight    Core Components  Commands  Events  Presence  Switches  Triggers  Values    Classes  People  Lights  Locks  Sensors", 
            "title": "Core Concepts"
        }, 
        {
            "location": "/#plugins", 
            "text": "Node RED plugins  Homenet plugins  Buttons  HVAC  Lights  Locks  Sensors", 
            "title": "Plugins"
        }, 
        {
            "location": "/#api", 
            "text": "Authentication: TBD  Documentation: TBD", 
            "title": "API"
        }, 
        {
            "location": "/basics/configuration/", 
            "text": "Configuration\n\n\nTo configure, create a \njs\n or \njson\n file somewhere.\n\n\nPass this in to \nhomenet4\n as the last argument.\n\n\nIf no configuration is passed in it uses \n/etc/homenet4/config.json\n.\n\n\nExample\n\n\n{\n  \ndataPath\n: \n,\n  \nwebServerPort\n: 1234,\n  \nlocation\n: {\n    \nlatitude\n: 37.8136,\n    \nlongitude\n: 144.9631\n  },\n  \nzones\n: [\n    {}\n  ],\n  \nscenes\n: [\n    {}\n  ],\n  \npeople\n: [\n    {}\n  ],\n  \ninstances\n: [\n    {}\n  ]\n}\n\n\n\n\nSchema\n\n\n{\n    \n$schema\n: \nhttp://json-schema.org/draft-04/schema#\n,\n    \ndefinitions\n: {},\n    \nid\n: \nhttp://homenet4/api/v1\n,\n    \nproperties\n: {\n        \ndataPath\n: {\n            \nid\n: \n/properties/dataPath\n,\n            \ntype\n: \nstring\n\n        },\n        \ninstances\n: {\n            \nid\n: \n/properties/instances\n,\n            \nitems\n: {},\n            \ntype\n: \narray\n\n        },\n        \nlocation\n: {\n            \nid\n: \n/properties/location\n,\n            \nproperties\n: {\n                \nlatitude\n: {\n                    \nid\n: \n/properties/location/properties/latitude\n,\n                    \ntype\n: \nnumber\n\n                },\n                \nlongitude\n: {\n                    \nid\n: \n/properties/location/properties/longitude\n,\n                    \ntype\n: \nnumber\n\n                }\n            },\n            \ntype\n: \nobject\n\n        },\n        \npeople\n: {\n            \nid\n: \n/properties/people\n,\n            \nitems\n: {},\n            \ntype\n: \narray\n\n        },\n        \nscenes\n: {\n            \nid\n: \n/properties/scenes\n,\n            \nitems\n: {},\n            \ntype\n: \narray\n\n        },\n        \nwebServerPort\n: {\n            \nid\n: \n/properties/webServerPort\n,\n            \ntype\n: \ninteger\n\n        },\n        \nzones\n: {\n            \nid\n: \n/properties/zones\n,\n            \nitems\n: {},\n            \ntype\n: \narray\n\n        }\n    },\n    \ntype\n: \nobject\n\n}", 
            "title": "Configuration"
        }, 
        {
            "location": "/basics/configuration/#configuration", 
            "text": "To configure, create a  js  or  json  file somewhere.  Pass this in to  homenet4  as the last argument.  If no configuration is passed in it uses  /etc/homenet4/config.json .", 
            "title": "Configuration"
        }, 
        {
            "location": "/basics/configuration/#example", 
            "text": "{\n   dataPath :  ,\n   webServerPort : 1234,\n   location : {\n     latitude : 37.8136,\n     longitude : 144.9631\n  },\n   zones : [\n    {}\n  ],\n   scenes : [\n    {}\n  ],\n   people : [\n    {}\n  ],\n   instances : [\n    {}\n  ]\n}", 
            "title": "Example"
        }, 
        {
            "location": "/basics/configuration/#schema", 
            "text": "{\n     $schema :  http://json-schema.org/draft-04/schema# ,\n     definitions : {},\n     id :  http://homenet4/api/v1 ,\n     properties : {\n         dataPath : {\n             id :  /properties/dataPath ,\n             type :  string \n        },\n         instances : {\n             id :  /properties/instances ,\n             items : {},\n             type :  array \n        },\n         location : {\n             id :  /properties/location ,\n             properties : {\n                 latitude : {\n                     id :  /properties/location/properties/latitude ,\n                     type :  number \n                },\n                 longitude : {\n                     id :  /properties/location/properties/longitude ,\n                     type :  number \n                }\n            },\n             type :  object \n        },\n         people : {\n             id :  /properties/people ,\n             items : {},\n             type :  array \n        },\n         scenes : {\n             id :  /properties/scenes ,\n             items : {},\n             type :  array \n        },\n         webServerPort : {\n             id :  /properties/webServerPort ,\n             type :  integer \n        },\n         zones : {\n             id :  /properties/zones ,\n             items : {},\n             type :  array \n        }\n    },\n     type :  object \n}", 
            "title": "Schema"
        }, 
        {
            "location": "/basics/customizing/", 
            "text": "Customizing\n\n\nPlugins\n\n\nCore can be customized with plugins th\n\n\nSee Plugins\n\n\nConfiguration\n\n\nM", 
            "title": "Customizing"
        }, 
        {
            "location": "/basics/customizing/#customizing", 
            "text": "", 
            "title": "Customizing"
        }, 
        {
            "location": "/basics/customizing/#plugins", 
            "text": "Core can be customized with plugins th  See Plugins", 
            "title": "Plugins"
        }, 
        {
            "location": "/basics/customizing/#configuration", 
            "text": "M", 
            "title": "Configuration"
        }, 
        {
            "location": "/basics/redis/", 
            "text": "Redis Persistence\n\n\nRedis is used for the simple persistence requirements of core. Other options TBA.\n\n\nAt present Redis must exist on the same host as code, but this limitation will change soon.", 
            "title": "Redis"
        }, 
        {
            "location": "/basics/redis/#redis-persistence", 
            "text": "Redis is used for the simple persistence requirements of core. Other options TBA.  At present Redis must exist on the same host as code, but this limitation will change soon.", 
            "title": "Redis Persistence"
        }, 
        {
            "location": "/basics/requirements/", 
            "text": "Requirements\n\n\nThere are only 2 requirements:\n\n\n\n\nNode JS v4+\n - required to run the core\n\n\nRedis\n - required for persistence for the core (other persistence options TBA)\n\n\n\n\nTo get the most out of core, you will want to install some plugins for both homenet and for Node-RED.", 
            "title": "Requirements"
        }, 
        {
            "location": "/basics/requirements/#requirements", 
            "text": "There are only 2 requirements:   Node JS v4+  - required to run the core  Redis  - required for persistence for the core (other persistence options TBA)   To get the most out of core, you will want to install some plugins for both homenet and for Node-RED.", 
            "title": "Requirements"
        }, 
        {
            "location": "/basics/starting/", 
            "text": "Starting Homenet Core\n\n\nAs a Global Package\n\n\nThe best way to use now is to install globally:\n\n\nnpm install -g @homenet/core\n\n\n\n\nThen install any plugins:\n\n\nnpm install -g @homenet/plugin-hue @homenet/plugin-mqtt\n\n\n\n\nThen create a config file somewhere like \n/etc/homenet/config.json\n.\n\n\nThen to run:\n\n\nhomenet4 /etc/homenet/config.json\n\n\n\n\nAs a Module\n\n\nconst homenet = require('homenet-core');\nconst RED = require('node-red');\nconst myConfig = require('./config');\n\nhomenet.init(RED, config)\n.start()\n.then(() =\n {\n  console.log('Started');\n});\n\n\n\n\nconst homenet = require('homenet-core');\nconst RED = require('node-red');\nconst myConfig = require('./config');\nconst myPlugin = require('./plugin');\n\nhomenet.init(RED, config)\n.loadPlugin(myPlugin);\n.start()\n.then(() =\n {\n  console.log('Started');\n});", 
            "title": "Starting"
        }, 
        {
            "location": "/basics/starting/#starting-homenet-core", 
            "text": "", 
            "title": "Starting Homenet Core"
        }, 
        {
            "location": "/basics/starting/#as-a-global-package", 
            "text": "The best way to use now is to install globally:  npm install -g @homenet/core  Then install any plugins:  npm install -g @homenet/plugin-hue @homenet/plugin-mqtt  Then create a config file somewhere like  /etc/homenet/config.json .  Then to run:  homenet4 /etc/homenet/config.json", 
            "title": "As a Global Package"
        }, 
        {
            "location": "/basics/starting/#as-a-module", 
            "text": "const homenet = require('homenet-core');\nconst RED = require('node-red');\nconst myConfig = require('./config');\n\nhomenet.init(RED, config)\n.start()\n.then(() =  {\n  console.log('Started');\n});  const homenet = require('homenet-core');\nconst RED = require('node-red');\nconst myConfig = require('./config');\nconst myPlugin = require('./plugin');\n\nhomenet.init(RED, config)\n.loadPlugin(myPlugin);\n.start()\n.then(() =  {\n  console.log('Started');\n});", 
            "title": "As a Module"
        }, 
        {
            "location": "/core/scenes/", 
            "text": "", 
            "title": "Scenes"
        }, 
        {
            "location": "/core/zones/", 
            "text": "Zones\n\n\nZones represent a geographic grouping of resources such as lights and locks.\n\n\nZones are configured in the configuration file:\n\n\n{\n    \nzones\n: [\n        {\nid\n:\nlounge\n, \nname\n:\nLounge Room\n, \nparent\n:\nliving\n, \ntemperature\n:\nsensor.lounge-temperature\n},\n        {\nid\n:\nkitchen\n, \nname\n:\nKitchen\n, \nparent\n:\nliving\n},\n        {\nid\n:\nbedroom\n, \nname\n:\nBedroom\n},\n        {\nid\n:\nliving\n, \nname\n:\nLiving Area\n}\n    ]\n}\n\n\n\n\nFields\n\n\nid\n\n\nRequired\n\n\nUnique ID or key for this zone.\n\n\nname\n\n\nRequired\n\n\nDisplay name for the zone.\n\n\nparent\n\n\nA zone heirarchy will be set up if parents are defined.\n\n\nPresence in parent zones is controlled by the child zones (presence in 1 or more child zones = presence in parent zone).\n\n\ntemperature\n\n\nReference to a value that represents the temperature for this zone.\n\n\nIn the format \nvalue_key:field\n, eg: \nsensor.hallway:temperature\n.\n\n\nhumidity\n\n\nReference to a value that represents the humidity for this zone.\n\n\nIn the format \nvalue_key:field\n, eg: \nsensor.hallway:humidity\n.\n\n\nluminescence\n\n\nReference to a value that represents the luminescence for this zone.\n\n\nIn the format \nvalue_key:field\n, eg: \nsensor.hallway:luminescence\n.\n\n\nZone Instance Members\n\n\nInstances of lights, locks, etc can be placed in a zone by setting the \nzoneId\n option.\n\n\nFor example:\n\n\n{\n    {class: 'light', id: 'hallway', type: 'hue', options: {zoneId:'hallway', groupId:9, hub:'main'}},\n    {class: 'sensor', id: 'hallway', type: 'ninja', options: {zoneId:'hallway', bridge:'main', deviceName:'hallway'}},\n}\n\n\n\n\nPresence\n\n\nZone presence can be automatically controlled by placing motion or presence sensors in the zone.\n\n\nIf a zone heirarchy is defined, presence is also controlled by child zones.", 
            "title": "Zones"
        }, 
        {
            "location": "/core/zones/#zones", 
            "text": "Zones represent a geographic grouping of resources such as lights and locks.  Zones are configured in the configuration file:  {\n     zones : [\n        { id : lounge ,  name : Lounge Room ,  parent : living ,  temperature : sensor.lounge-temperature },\n        { id : kitchen ,  name : Kitchen ,  parent : living },\n        { id : bedroom ,  name : Bedroom },\n        { id : living ,  name : Living Area }\n    ]\n}", 
            "title": "Zones"
        }, 
        {
            "location": "/core/zones/#fields", 
            "text": "", 
            "title": "Fields"
        }, 
        {
            "location": "/core/zones/#id", 
            "text": "Required  Unique ID or key for this zone.", 
            "title": "id"
        }, 
        {
            "location": "/core/zones/#name", 
            "text": "Required  Display name for the zone.", 
            "title": "name"
        }, 
        {
            "location": "/core/zones/#parent", 
            "text": "A zone heirarchy will be set up if parents are defined.  Presence in parent zones is controlled by the child zones (presence in 1 or more child zones = presence in parent zone).", 
            "title": "parent"
        }, 
        {
            "location": "/core/zones/#temperature", 
            "text": "Reference to a value that represents the temperature for this zone.  In the format  value_key:field , eg:  sensor.hallway:temperature .", 
            "title": "temperature"
        }, 
        {
            "location": "/core/zones/#humidity", 
            "text": "Reference to a value that represents the humidity for this zone.  In the format  value_key:field , eg:  sensor.hallway:humidity .", 
            "title": "humidity"
        }, 
        {
            "location": "/core/zones/#luminescence", 
            "text": "Reference to a value that represents the luminescence for this zone.  In the format  value_key:field , eg:  sensor.hallway:luminescence .", 
            "title": "luminescence"
        }, 
        {
            "location": "/core/zones/#zone-instance-members", 
            "text": "Instances of lights, locks, etc can be placed in a zone by setting the  zoneId  option.  For example:  {\n    {class: 'light', id: 'hallway', type: 'hue', options: {zoneId:'hallway', groupId:9, hub:'main'}},\n    {class: 'sensor', id: 'hallway', type: 'ninja', options: {zoneId:'hallway', bridge:'main', deviceName:'hallway'}},\n}", 
            "title": "Zone Instance Members"
        }, 
        {
            "location": "/core/zones/#presence", 
            "text": "Zone presence can be automatically controlled by placing motion or presence sensors in the zone.  If a zone heirarchy is defined, presence is also controlled by child zones.", 
            "title": "Presence"
        }, 
        {
            "location": "/core/classes/", 
            "text": "Classes\n\n\nClasses represent common interactable objects in domotics.\n\n\nStandard Classes\n\n\nCore defines a number of standard classes by default.\nThese cannot be removed:\n- People\n- Lights\n- Locks\n- Sensors\n- HVAC\n\n\nClass Types\n\n\nLights, locks and sensors are all \ntyped\n classes, which essentially mean that the class is abstract and requires implementations for each type.\nTypically this corresponds to specific brands or products, for example Hue or LIFX for \nLights\n.\n\n\nSee \nPlugins\n for more info on these.\n\n\nAdding Custom Classes\n\n\n\n\nUse \nClassesManager\n to add class\n\n\nExtend \nClassTypeManager\n to easily add typed classes\n\n\nUse instances in \nIConfig\n to add instances", 
            "title": "Home"
        }, 
        {
            "location": "/core/classes/#classes", 
            "text": "Classes represent common interactable objects in domotics.", 
            "title": "Classes"
        }, 
        {
            "location": "/core/classes/#standard-classes", 
            "text": "Core defines a number of standard classes by default.\nThese cannot be removed:\n- People\n- Lights\n- Locks\n- Sensors\n- HVAC", 
            "title": "Standard Classes"
        }, 
        {
            "location": "/core/classes/#class-types", 
            "text": "Lights, locks and sensors are all  typed  classes, which essentially mean that the class is abstract and requires implementations for each type.\nTypically this corresponds to specific brands or products, for example Hue or LIFX for  Lights .  See  Plugins  for more info on these.", 
            "title": "Class Types"
        }, 
        {
            "location": "/core/classes/#adding-custom-classes", 
            "text": "Use  ClassesManager  to add class  Extend  ClassTypeManager  to easily add typed classes  Use instances in  IConfig  to add instances", 
            "title": "Adding Custom Classes"
        }, 
        {
            "location": "/core/classes/people/", 
            "text": "People", 
            "title": "People"
        }, 
        {
            "location": "/core/classes/people/#people", 
            "text": "", 
            "title": "People"
        }, 
        {
            "location": "/core/components/commands/", 
            "text": "Commands\n\n\nCommands represent executable actions for items such as \nclass instances\n.\nFor example lights can \nturnOn\n or \nturnOff\n, locks can \nlock\n and \nunlock\n.", 
            "title": "Commands"
        }, 
        {
            "location": "/core/components/commands/#commands", 
            "text": "Commands represent executable actions for items such as  class instances .\nFor example lights can  turnOn  or  turnOff , locks can  lock  and  unlock .", 
            "title": "Commands"
        }, 
        {
            "location": "/core/components/events/", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/core/components/presence/", 
            "text": "Presence\n\n\nPresence items represent the presence of something, for example a presence for a motion sensor indicates the detection of an object,\npresnece of a person indicates their presence at the home,\npresence of a zone indicates the occupancy of a zone.\n\n\nEvery presence item exhibits a presence state - \npresent\n or \naway\n.\n\n\nThe presence of a specific item can be regulated in three ways:\n\n\n\n\nBy \nset\ning or \nclear\ning the item's presence. This is typical for a person or zone, or intelligent motion sensors.\n\n\nBy \nbump\ning the presence with a \ntimeout\n interval. This is typical for simple motion sensors that operate on more of a fire-and-forget approach.\n\n\nBy having children, in which case the presence is regulated by the presence of any of the child items. This is typical of zones that are regulated by sensors, or", 
            "title": "Presence"
        }, 
        {
            "location": "/core/components/presence/#presence", 
            "text": "Presence items represent the presence of something, for example a presence for a motion sensor indicates the detection of an object,\npresnece of a person indicates their presence at the home,\npresence of a zone indicates the occupancy of a zone.  Every presence item exhibits a presence state -  present  or  away .  The presence of a specific item can be regulated in three ways:   By  set ing or  clear ing the item's presence. This is typical for a person or zone, or intelligent motion sensors.  By  bump ing the presence with a  timeout  interval. This is typical for simple motion sensors that operate on more of a fire-and-forget approach.  By having children, in which case the presence is regulated by the presence of any of the child items. This is typical of zones that are regulated by sensors, or", 
            "title": "Presence"
        }, 
        {
            "location": "/core/components/switches/", 
            "text": "Switches\n\n\nSwitches represent settable or switchable items such as \nclass instances\n.\nSome classes may provide multiple switches.\n\n\nSwitches can be \nset\n or \nget\n, where \nset\n changes the state (switches) the instance, and \nget\n returns the current state of the switch.\n\n\nFor example setting a light changes it's state (turn on or off, or change colour), setting a lock will lock or unlock the device.\n\n\nMost switches can be set with \ntrue\n or \nfalse\n to toggle the primary values (on/off, enable/disable).\n\n\nSome switches are overloaded and can accept booleans, numbers and strings. For example Hue lights may accept \ntrue\n to turn a light on or \n\"red\"\n to set the light color.", 
            "title": "Switches"
        }, 
        {
            "location": "/core/components/switches/#switches", 
            "text": "Switches represent settable or switchable items such as  class instances .\nSome classes may provide multiple switches.  Switches can be  set  or  get , where  set  changes the state (switches) the instance, and  get  returns the current state of the switch.  For example setting a light changes it's state (turn on or off, or change colour), setting a lock will lock or unlock the device.  Most switches can be set with  true  or  false  to toggle the primary values (on/off, enable/disable).  Some switches are overloaded and can accept booleans, numbers and strings. For example Hue lights may accept  true  to turn a light on or  \"red\"  to set the light color.", 
            "title": "Switches"
        }, 
        {
            "location": "/core/components/triggers/", 
            "text": "Triggers", 
            "title": "Triggers"
        }, 
        {
            "location": "/core/components/triggers/#triggers", 
            "text": "", 
            "title": "Triggers"
        }, 
        {
            "location": "/core/components/values/", 
            "text": "Values", 
            "title": "Values"
        }, 
        {
            "location": "/core/components/values/#values", 
            "text": "", 
            "title": "Values"
        }, 
        {
            "location": "/core/environment/sunlight/", 
            "text": "", 
            "title": "Sunlight"
        }, 
        {
            "location": "/core/rules/custom-nodes/", 
            "text": "", 
            "title": "Custom nodes"
        }, 
        {
            "location": "/core/rules/global-context/", 
            "text": "", 
            "title": "Global context"
        }, 
        {
            "location": "/core/rules/node-red/", 
            "text": "", 
            "title": "Node red"
        }, 
        {
            "location": "/plugins/buttons/", 
            "text": "", 
            "title": "Buttons"
        }, 
        {
            "location": "/plugins/hvac/", 
            "text": "HVAC\n\n\nIHvac Interface\n\n\nSwitch\n\n\nHVAC implements a switch interface, ie:\n\n\nget() : number\nset(value: number|boolean) : void\n\n\n\n\nCommands\n\n\nturnOn(): void\nturnOff(): void", 
            "title": "Hvac"
        }, 
        {
            "location": "/plugins/hvac/#hvac", 
            "text": "", 
            "title": "HVAC"
        }, 
        {
            "location": "/plugins/hvac/#ihvac-interface", 
            "text": "", 
            "title": "IHvac Interface"
        }, 
        {
            "location": "/plugins/hvac/#switch", 
            "text": "HVAC implements a switch interface, ie:  get() : number\nset(value: number|boolean) : void", 
            "title": "Switch"
        }, 
        {
            "location": "/plugins/hvac/#commands", 
            "text": "turnOn(): void\nturnOff(): void", 
            "title": "Commands"
        }, 
        {
            "location": "/plugins/", 
            "text": "Plugins\n\n\nHomenet Plugins\n\n\nHomenet Plugins provide vendor specific implementations for core classes.\n\n\nPlugins can provide implementations for the following classes:\n\n\n\n\nLights\n\n\nLocks\n\n\nSensors\n including motion sensors and temperature sensors\n\n\nButtons\n\n\nHVAC\n\n\n\n\nNode RED Plugins\n\n\nIn addition to Homenet plugins, \nNode RED plugins can also be used\n.\n\n\nNode RED plugins can be used within any rule, but are not available via the API.", 
            "title": "Home"
        }, 
        {
            "location": "/plugins/#plugins", 
            "text": "", 
            "title": "Plugins"
        }, 
        {
            "location": "/plugins/#homenet-plugins", 
            "text": "Homenet Plugins provide vendor specific implementations for core classes.  Plugins can provide implementations for the following classes:   Lights  Locks  Sensors  including motion sensors and temperature sensors  Buttons  HVAC", 
            "title": "Homenet Plugins"
        }, 
        {
            "location": "/plugins/#node-red-plugins", 
            "text": "In addition to Homenet plugins,  Node RED plugins can also be used .  Node RED plugins can be used within any rule, but are not available via the API.", 
            "title": "Node RED Plugins"
        }, 
        {
            "location": "/plugins/lights/", 
            "text": "", 
            "title": "Lights"
        }, 
        {
            "location": "/plugins/locks/", 
            "text": "", 
            "title": "Locks"
        }, 
        {
            "location": "/plugins/nodered/", 
            "text": "Node RED Plugins", 
            "title": "Nodered"
        }, 
        {
            "location": "/plugins/nodered/#node-red-plugins", 
            "text": "", 
            "title": "Node RED Plugins"
        }, 
        {
            "location": "/plugins/sensors/", 
            "text": "", 
            "title": "Sensors"
        }
    ]
}